
- combine user/group into a single entity:

    Everything turns into an Account.

    Account.is_group flags is something is a group or not. Only groups
    can contain repositories, unless the user is marked as a 'publisher'
    (either via a role or a `is_publisher`) flag.

        Change roles to use '|wheel|observer|publisher|' with delimiters on the
        ends so that LIKE will work (e.g. `roles LIKE '%|wheel|%').

    group_membership must be rejiggered to be two Account objects

        rename to "group_memberships"
        Account.parents -> list of groups this is a member of
        Account.children -> list of accounts that are members of this

    Permissions must be changed:

        'account.read' -> see and list contents of the account
        'account.write' -> edit the metadata, and push new repos
        'account.delete' -> delete the account, duh!


- move repos/groups/users to trash, instead of deleting them
    - `is_trash` field on all of those
    
- repo creation should assert that the files don't already exist
    - 'group.autocreate' and 'repo.autocreate'
    - groups don't really care if there is a folder there or not

- metadata editing on groups and repos

- flash messages via https://github.com/HubSpot/messenger

- creating repos
- deleting repos
- editing repo metadata (description, email, etc.)
- creating groups
- deleting groups
- editing group metadata
- editing group memberships (inviting other users)


- main repo view is the README, or instructions on how to push to it, like github
    
    Create a new repository on the command line

        touch README.md
        git init
        git add README.md
        git commit -m "first commit"
        git remote add origin git@github.com:mikeboers/sandbox.git
        git push -u origin master
        Push an existing repository from the command line

    Push an existing repository

        git remote add origin git@github.com:mikeboers/sandbox.git
        git push -u origin master


- test the permissions!


- 'group.create' permission is effectively 'http.post' on 'group_create' entrypoint

- avatars are all from gravatar

- add `update` hook to repos on creation. It is run once for every branch being
  pushed BEFORE they are accepted, allowing us to do write/force/merge control.

    - http://git-scm.com/book/en/Customizing-Git-Git-Hooks#Server-Side-Hooks
    - https://github.com/sitaramc/gitolite/blob/master/src/lib/Gitolite/Hooks/Update.pm#L110

- read-only HTTP access to the repo. This is a matter of preparing a couple of
  special index files, see:

  http://git-scm.com/book/en/Git-Internals-Transfer-Protocols#The-Dumb-Protocol

- auth via GitHub, Facebook, passwords, or one-time links which create cookies
  for access to single projects.

- example.com/pypi to give a pip-usable interface using tags.

- be able to mark repos as clones from other locations. Periodically pull them,
  OR respond when they are hit with a webhook from GitHub or a post-recieve hook.


Name:
    git.ly
    gitly
    gitlight (too much like gitolite)
    gitter

    git pipe
    git house
    git-pump

    git-only
    gitsplore

    Git Get
    
    Git One (git-one)
    Git Me
    Git Base
    Git by Git
    Git Map

    git-stop
    git-town




